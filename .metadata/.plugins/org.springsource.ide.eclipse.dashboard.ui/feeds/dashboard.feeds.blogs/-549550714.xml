<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2019-08-02T20:21:40Z</updated>
  <entry>
    <title>Spring Boot for Apache Geode &amp; Pivotal GemFire 1.1.0.RC1 Released!</title>
    <link rel="alternate" href="https://spring.io/blog/2019/08/02/spring-boot-for-apache-geode-pivotal-gemfire-1-1-0-rc1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>John Blum</name>
    </author>
    <id>tag:spring.io,2019-08-02:3757</id>
    <updated>2019-08-02T20:21:40Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;It is my pleasure to announce the release of &lt;em&gt;Spring Boot for Apache Geode &amp;amp; Pivotal GemFire/Pivotal Cloud Cache&lt;/em&gt; (SBDG) &lt;code&gt;1.1.0.RC1&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This is the 1st of 2 release candidates before the &lt;strong&gt;final GA&lt;/strong&gt;, tentatively scheduled for &lt;strong&gt;Wednesday, August 14th, 2019&lt;/strong&gt;.  Be on the lookout for the SBDG 1.1.0.RELEASE then.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You make acquire the new SBDG &lt;code&gt;1.1.0.RC1&lt;/code&gt; bits from Spring&amp;#8217;s &lt;code&gt;libs-milestone&lt;/code&gt; repo &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/geode/spring-geode-starter/1.1.0.RC1/"&gt;here&lt;/a&gt;, or by declaring the following dependency declaration in your Maven POM:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="title"&gt;Maven Dependency&lt;/div&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.springframework.geode&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;spring-geode-starter&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.1.0.RC1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="whats-new"&gt;&lt;a class="anchor" href="#whats-new"&gt;&lt;/a&gt;What&amp;#8217;s New&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The theme of the 1.1.x release line has once again been focused on developer productivity using the amazing power of Spring Boot combined with effective use of Apache Geode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;One of the easiest, quickest ways to get started using modern, &lt;strong&gt;Cloud-Native Data Access Technologies&lt;/strong&gt; (and patterns) in your enterprise application architecture is to start by leveraging Apache Geode as a &lt;em&gt;caching provider&lt;/em&gt; in &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#cache"&gt;Spring&amp;#8217;s Cache Abstraction&lt;/a&gt;.  It is truly the least invasive approach to introducing a modern, scalable data stack, like Apache Geode, in your enterprise application architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Indeed, caching is a very powerful design pattern allowing you to make more effective use of system resources and prolong the life of legacy data management systems (e.g. RDBMS).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In the &lt;code&gt;1.1.0.RC1&lt;/code&gt; release, we include a &lt;strong&gt;new&lt;/strong&gt; &lt;a href="https://docs.spring.io/spring-boot-data-geode-build/1.1.x/reference/html5/guides/caching-inline.html"&gt;Sample&lt;/a&gt; that builds on the &lt;em&gt;Look-Aside Cache&lt;/em&gt; pattern and introduces you &lt;strong&gt;&lt;em&gt;Inline Caching&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonitionblock tip"&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;div class="title"&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class="content"&gt;
Of course, if you have not done so already, you should first read the &lt;a href="https://docs.spring.io/spring-boot-data-geode-build/1.1.x/reference/html5/guides/caching-look-aside.html"&gt;Guide&lt;/a&gt; on &lt;strong&gt;&lt;em&gt;Look-Aside Caching&lt;/em&gt;&lt;/strong&gt;.  It includes &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/tree/1.1.0.RC1/spring-geode-samples/caching/look-aside"&gt;example code&lt;/a&gt; as well.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="whats-next"&gt;&lt;a class="anchor" href="#whats-next"&gt;&lt;/a&gt;What&amp;#8217;s Next&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Since we are focused on the topic of caching in the &lt;code&gt;1.1.x&lt;/code&gt; release series, we will round out our discussion on caching by talking about one more caching design pattern&amp;#8230;&amp;#8203; &lt;strong&gt;&lt;em&gt;Near Caching&lt;/em&gt;&lt;/strong&gt; in the 1.1.0.RC2 release, coming up next.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Finally, in the 1.1 GA, we will talk about a common Use Case for caching, HTTP Session state caching, and how &lt;a href="https://spring.io/projects/spring-session"&gt;Spring Session&lt;/a&gt; makes short work of that.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="feedback"&gt;&lt;a class="anchor" href="#feedback"&gt;&lt;/a&gt;Feedback&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As always, we want to hear from you on how we are doing.  Your feedback is highly important in helping us shape the product to help you achieve your desired outcomes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Also don&amp;#8217;t forget &lt;a href="https://springoneplatform.io/"&gt;SpringOne Platform 2019&lt;/a&gt; is just around the corner. Don&amp;#8217;t miss out!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-boot-data-geode/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/pulls"&gt;PR&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-boot"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Framework 5.1.9, 5.0.15 and 4.3.25 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2019/08/02/spring-framework-5-1-9-5-0-15-and-4-3-25-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>St√©phane Nicoll</name>
    </author>
    <id>tag:spring.io,2019-08-02:3756</id>
    <updated>2019-08-02T11:10:17Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone who has contributed, I am pleased to announce that Spring Framework &lt;code&gt;5.1.9&lt;/code&gt;, &lt;code&gt;5.0.15&lt;/code&gt;, and &lt;code&gt;4.3.25&lt;/code&gt; are available now.&lt;/p&gt;
&lt;p&gt;Spring Framework &lt;code&gt;5.1.9&lt;/code&gt; includes &lt;a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.1.9.RELEASE"&gt;38 fixes and improvements&lt;/a&gt; and is a recommended upgrade for all 5.x users. Spring Framework &lt;code&gt;5.0.15&lt;/code&gt; includes &lt;a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.0.15.RELEASE"&gt;16 selected fixes&lt;/a&gt; while Spring Framework &lt;code&gt;4.3.25&lt;/code&gt; includes &lt;a href="https://github.com/spring-projects/spring-framework/releases/tag/v4.3.25.RELEASE"&gt;10 selected fixes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next up is Spring Framework 5.2 RC1 coming up early next week followed by the usual Spring Boot releases, stay tuned!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://projects.spring.io/spring-framework/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-framework/docs/5.1.9.RELEASE/spring-framework-reference"&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Gradle Developer Advocate Jenn Strater</title>
    <link rel="alternate" href="https://spring.io/blog/2019/08/02/a-bootiful-podcast-gradle-developer-advocate-jenn-strater" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-08-02:3755</id>
    <updated>2019-08-02T05:58:08Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! In today&amp;rsquo;s installment, &lt;a href="http://twitter.com/Starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt; talks to Gradle Developer Advocate &lt;a href="http://twitter.com/codeJENNerator"&gt;Jenn Strater (@codeJENNerator)&lt;/a&gt; about Gradle, Groovy, Spring REST Docs, and so much more.&lt;/p&gt;
&lt;iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/659985764&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - July 30, 2019</title>
    <link rel="alternate" href="https://spring.io/blog/2019/07/30/this-week-in-spring-july-30-2019" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-07-30:3754</id>
    <updated>2019-07-30T19:41:18Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;. This week I&amp;rsquo;m in sweet San Francisco, soaking up the sun and enjoying the fun of summer. Sure, I&amp;rsquo;ve got a few meetings, and appearances, etc., but it is very nice to be home. By the by, I&amp;rsquo;ll be speaking at the upcoming &lt;a href="https://www.meetup.com/sfjava/"&gt;San Francisco Java User Group&lt;/a&gt; - come hang out and say hi! &lt;/p&gt;
&lt;p&gt;Anyway, lots of good stuff (as usual), so let&amp;rsquo;s get to it. &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/07/30/spring-cloud-data-flow-2-2-0-released"&gt;Spring Cloud Data Flow 2.2.0 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Do not miss this extra special episode of &lt;a href="https://spring.io/blog/2019/07/26/spring-team-legend-oliver-drotbohm"&gt;&lt;em&gt;A Bootiful Podcast&lt;/em&gt; with Spring team legend Oliver Drotbohm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/07/24/simplifying-the-spring-cloud-release-train"&gt;Simplifying the Spring Cloud Release Train&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out this great demonstrationn of &lt;a href="https://www.youtube.com/watch?time_continue=50&amp;v=ecNfohOuzMI"&gt;Spring Cloud Task / Spring Batch-job executions and the monitoring of it using Spring Cloud Data Flow 2.2 with InfluxDB and Grafana in Spring Cloud Data Flow 2.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Hey Milwaukee, come hear Spring Cloud lead Spencer Gibb talk about &lt;a href="https://www.meetup.com/Chicago-Spring-User-Group/events/262612322/"&gt;Spring Cloud Gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/springboot/status/1155735050962575360"&gt;Good news everyone! Spring Boot supports Java 13&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/cloudfoundry/status/1154800946850881537"&gt;Happy Sys-Admin appreciation day!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I love the possibilities of &lt;a href="https://twitter.com/r_arni/status/1153884012622032896"&gt;Spring Cloud Gateway, as is well illustrated in this tweet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A nice post on Mkyong.com with &lt;a href="https://www.mkyong.com/spring-boot/spring-boot-jdbc-examples/"&gt;Spring Boot JDBC Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;We love our community members; &lt;a href="https://twitter.com/springcentral/status/1153790473032437767"&gt;thanks Vedran Pavic!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Data Flow 2.2.0 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/07/30/spring-cloud-data-flow-2-2-0-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Janne Valkealahti</name>
    </author>
    <id>tag:spring.io,2019-07-30:3752</id>
    <updated>2019-07-30T18:33:33Z</updated>
    <content type="html">&lt;p&gt;The &lt;a href="https://cloud.spring.io/spring-cloud-dataflow/"&gt;Spring Cloud Data Flow&lt;/a&gt; team is pleased to announce the GA release of 2.2.0.&lt;/p&gt;
&lt;p&gt;In this GA release, Spring Cloud Data Flow team has worked on some of the key features including task application management, stability on the product by increasing the acceptance tests coverage across platforms (local, Kubernetes and Cloud Foundry), bug fixes and enhancements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Task Application Management&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is now possible to stop and delete task executions using the SCDF Dashboard and the Shell.&lt;br/&gt;We have added support for task application monitoring using micrometer integration. The core of the Micrometer integration landed in Spring Cloud Task&amp;rsquo;s 2.2.0 release-line, which by the way is a requirement if you are going to try out the Task-metrics and the SCDF integration.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/ecNfohOuzMI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;For convenience, we have a &lt;a href="https://github.com/tzolov/task-demo-metrics/blob/master/README.md"&gt;sample application&lt;/a&gt; that builds on the compatible upstream versions of Spring Boot, Spring Batch, and Spring Cloud Task. With this application launched in SCDF, you are now able to instrument metrics with InfluxDB as the backend, and likewise visualize the statistics through Grafana dashboard as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/tzolov/task-demo-metrics/master/docs/grafana-task.png" alt="Screenshot" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Accessing the stream/task application logs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spring Cloud Data Flow dashboard shows the stream and task applications logs. This feature is available in local, Kubernetes and Cloud Foundry platforms. Spring Cloud Data Flow&amp;rsquo;s dashboard now exposes the stream and task application logs. This functionality is powered by a new REST API available from Spring Cloud Data Flow.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dashboard improvements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can watch this video for some of the dashboard improvements:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/rz-smoRLcFY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;strong&gt;Patching Database Drivers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The community members and the customers who attempted to patch Spring Cloud Data Flow with proprietary database drivers have had the option to clone and build the project locally.&lt;br/&gt;There&amp;rsquo;s another option, though. The procedure is now &lt;a href="https://docs.spring.io/spring-cloud-dataflow/docs/2.2.0.RELEASE/reference/htmlsingle/#_adding_a_custom_jdbc_driver"&gt;documented&lt;/a&gt; for both Maven and Gradle users.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Acceptance Tests&lt;/strong&gt;&lt;br/&gt;We improved our quality of Acceptance tests running against the supported platforms Local, Pivotal Cloud Foundry, Kubernetes (GKE and PKS). This gives us confidence in shipping quality product which we continue to embrace.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Developer Recipes&lt;/strong&gt;&lt;br/&gt;New recipes are added to help developers configuring and managing the stream applications with Apache Kafka, RabbitMQ and Amazon Kinesis. There is also a recipe on File ingest and ETL processing on Kubernetes and Cloud Foundry. See Spring Cloud Data Flow &lt;a href="https://dataflow.spring.io/"&gt;website&lt;/a&gt;. Given all the content is coded as markdown files, it is easy for the community to contribute, so feel free to start the dialog with pull-requests - we are looking forward to your contributions &lt;a href="https://github.com/spring-io/dataflow.spring.io"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="#stay-in-touch-hellip" class="anchor" name="stay-in-touch-hellip"&gt;&lt;/a&gt;Stay in touch&amp;hellip;&lt;/h2&gt;
&lt;p&gt;As always, we welcome feedback and contributions, so please reach out to us on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud-dataflow"&gt;Stackoverflow&lt;/a&gt; or &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow/issues"&gt;GitHub&lt;/a&gt; or via &lt;a href="https://gitter.im/spring-cloud/spring-cloud-dataflow"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Spring team legend Oliver Drotbohm</title>
    <link rel="alternate" href="https://spring.io/blog/2019/07/26/a-bootiful-podcast-spring-team-legend-oliver-drotbohm" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-07-26:3751</id>
    <updated>2019-07-26T07:05:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! In this installment, &lt;a href="http://twitter.com/Starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt; talks to former Spring Data lead, creator of Spring HATEOAS, vocal hypermedia advocate and musician &lt;a href="http://twitter.com/odrotbohm"&gt;Oliver Drotbohm (@odrotbohm)&lt;/a&gt; on Spring Data, HATEOAS, Hypermedia, and more.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://twitter.com/odrotbohm"&gt;Oliver on Twitter (@odrotbohm)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/656622650&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Simplifying the Spring Cloud Release Train</title>
    <link rel="alternate" href="https://spring.io/blog/2019/07/24/simplifying-the-spring-cloud-release-train" />
    <category term="releases" label="Releases" />
    <author>
      <name>Spencer Gibb</name>
    </author>
    <id>tag:spring.io,2019-07-24:3749</id>
    <updated>2019-07-24T21:30:30Z</updated>
    <content type="html">&lt;p&gt;Spring Cloud continues to prove immensely popular, and over the last few years a number of IaaS providers have provided integration with their technology and joined the release train. This has typically involved getting into the spring-cloud GitHub org and publishing in the org.springframework.cloud Maven groupid. As the number of projects included looks to increase, it is becoming a little unwieldy, and we wanted to take a step back and review the pros and cons that this model provides and propose a better path forward that benefits all projects involved.&lt;/p&gt;
&lt;p&gt;Perhaps the biggest downside to being part of the release train is that it removes a level of control from the project maintainers. Since the core Spring Cloud team does the releases, maintainers can‚Äôt work to the schedule of the technology they are integrating with. Or even if they do manage to get a service refresh out, it won‚Äôt be picked up by the release train until the next release train version is released. This model also means that typically the project maintainer doesn‚Äôt have direct access to key statistics, such as the Maven download numbers for their project.&lt;/p&gt;
&lt;p&gt;Also, there appears to be a lot of benefits to being part of the release train, but in fact many of these are benefits available to any project, rather than being anything to do with being on the train or in the spring-cloud GitHub org:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The Spring Cloud team regularly engages with external projects to help review them and provide constructive feedback on how best to integrate with Spring Cloud. Inclusion in the release train doesn‚Äôt make this more or less likely to happen. (Please reach out if you want feedback.)&lt;/li&gt;
  &lt;li&gt;There is a perception that it makes it easier to get that elusive checkbox on &lt;a href="https://start.spring.io"&gt;start.spring.io&lt;/a&gt;. This is not true. There are &lt;a href="https://github.com/spring-io/initializr/wiki/Guidelines-for-3rd-Party-Starters"&gt;guidelines&lt;/a&gt; about how to ensure a project is developed such that it is suitable for start.spring.io, but decisions about inclusion are based on more than following a naming scheme. Are we finding that the community is embracing the technology the project is integrating with? Has the project built a vibrant and sustainable community, ensuring a long life and healthy codebase? Are there sufficient docs, guides, etc. showing how to use the project? Nothing in the guidelines necessitates inclusion in a Spring GitHub organization.&lt;/li&gt;
  &lt;li&gt;The Spring team regularly produces content involving third-party projects, highlighting key releases or enhancements. There is no need to be part of the release train for this to happen.&lt;br/&gt;The &lt;a href="https://spring.io"&gt;https://spring.io&lt;/a&gt; site obviously includes content that covers the main Spring Cloud projects, but it also includes content that covers some third-party projects. This might be a guide showing how to use the technology or an entry on one of the existing project pages. See &lt;a href="https://spring.io/projects/spring-cloud"&gt;https://spring.io/projects/spring-cloud&lt;/a&gt;, which refers to many projects &amp;ndash; some of which are on the train and some of which are not.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For these reasons, the Spring Cloud team has decided to move to a model that slims down the release train, allowing us to address the downsides whilst keeping all the perceived benefits. The proposal is that IaaS providers will host and maintain their code in their own GitHub organizations. This applies to all of the existing integrations currently on the release train. Spring Cloud Azure have never joined the train, and the Spring Cloud Alibaba team are already embracing this new model as they graduate from the incubator organization.&lt;/p&gt;&lt;h2&gt;&lt;a href="#what-will-this-mean-in-practical-terms" class="anchor" name="what-will-this-mean-in-practical-terms"&gt;&lt;/a&gt;What will this mean in practical terms?&lt;/h2&gt;
&lt;p&gt;The removal of some of these projects from the Spring Cloud GitHub organization and the release train is not a statement about a change in active development or support policy. The same teams will be working on these, keeping up with Spring Cloud releases. If anything, this change may bring clarity to the support model: if the projects are hosted in the IaaS provider‚Äôs GitHub organization, they are obviously providing the support.&lt;/p&gt;
&lt;p&gt;The new model does mean that there will likely be a change in the group-id, and possibly in the artifact-id. It is also likely that the package names will be updated to reflect these changes. Developers will also need to explicitly include these dependencies in their projects, rather than inheriting them via managed versions through the Spring Cloud BOM.&lt;/p&gt;
&lt;p&gt;The Spring Boot team have &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-auto-configuration.html#boot-features-custom-starter-naming"&gt;guidelines&lt;/a&gt; for appropriate naming of modules (autoconfiguration and starters). These are not strictly enforced for Spring Cloud, but adherence to the guidelines can mean that anything built relying on the scheme will ‚Äòjust work‚Äô (for example, content assist tooling in an IDE).&lt;/p&gt;
&lt;p&gt;Following this model, the Alibaba team are graduating from the spring-cloud-incubator into their own GitHub org at &lt;a href="https://github.com/alibaba/spring-cloud-alibaba"&gt;https://github.com/alibaba/spring-cloud-alibaba&lt;/a&gt;, where we continue to work with them as they head this week for an important release that supports Spring Cloud Greenwich.SR2 and Finchley.SR4. This release will include Sentinel support for Spring Cloud Gateway and enable Nacos service discovery and Spring-Cloud-Config to be used together. Look out for that!&lt;/p&gt;
&lt;p&gt;You can expect to see the other providers move during the release of a future major Spring Cloud train, as a major release is the right time to make a serious change such as this.&lt;/p&gt;
&lt;p&gt;Note that this is purely describing the situation and plan for the main Spring Cloud train at this time; it isn‚Äôt impacting other projects (for example, Spring Cloud Stream binders).&lt;/p&gt;
&lt;p&gt;We hope that the reasoning above explains what we are trying to achieve with this strategy. As always, we are receptive to feedback ‚Äî please let us know what you think. Giving project owners full flexibility to build and release software that better aligns with their culture, whilst continuing to offer all of the benefits of working closely with us on code reviews and project promotion, should benefit everyone.&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - July 23, 2019</title>
    <link rel="alternate" href="https://spring.io/blog/2019/07/23/this-week-in-spring-july-23-2019" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-07-23:3748</id>
    <updated>2019-07-23T13:18:10Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! I concluded my time in Portland, OR, for OSCON on Sunday, went to Chicago for the epic Chicago, IL Cloud Conf yesterday; today I am in Denver, CO, for meetings; and then Wednesday I am off to Burlington, MA for the SpringOne Tour 2019 event. We&amp;rsquo;ve got some good stuff this week so let&amp;rsquo;s get to it! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Hi Spring fans! In last week&amp;rsquo;s episode of &lt;a href="https://spring.io/blog/2019/07/19/a-bootiful-podcast-azul-cto-gil-tene-on-java-jvms-garbage-collection-and-a-ton-more"&gt;&lt;em&gt;A Bootiful Podcast&lt;/em&gt;, I talk to Azul CTO Gil Tene on Java, JVMs, garbage collection, and a ton more&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;There&amp;rsquo;s an interesting new feature on &lt;code&gt;master&lt;/code&gt; for Spring Cloud Gateway giving &lt;a href="https://github.com/spring-cloud/spring-cloud-gateway/pull/785#issuecomment-513988787"&gt;improved details about your routes in the Actuator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out how the Dutch government uses &lt;a href="https://www.cloudfoundry.org/blog/dutch-government-uses-cloud-foundry-enhance-user-experience/"&gt;Cloud Foundry to enhance users experience&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;It&amp;rsquo;s finally here! Check out the new support for the &lt;a href="https://content.pivotal.io/pivotal-announcements/pivotal-makes-kubernetes-easier-for-developers-and-operators?utm_campaign=pr-pivotal-makes-kubernetes-easier-q219&amp;utm_source=twitter&amp;utm_medium=social&amp;utm_content=1562979455"&gt;Cloud Foundry PAS running on Kubernetes&lt;/a&gt;. Here&amp;rsquo;s another post with details from our partners over at VMWare &lt;a href="https://blogs.vmware.com/cloudnative/2019/07/16/pas-on-kubernetes-improves-the-developer-experience/"&gt;on how PAS on Kubernetes improves the developer experience&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A nice post on the Okta blog on how to &lt;a href="https://developer.okta.com/blog/2019/07/17/monitoring-with-actuator"&gt;monitor your Java applications with the Spring Boot Actuator &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://springonetour.io/2019/burlington"&gt;Have you registered for the Burlington, MA installment of the SpringOne Tour&lt;/a&gt;?&lt;/li&gt;
  &lt;li&gt;An interesting &lt;a href="https://www.youtube.com/watch?v=-wruptabpq4&amp;feature=share"&gt;video on creating REST APIs with Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;InfoQ has a nice post on &lt;a href="https://www.infoq.com/news/2019/07/spring-initializr-tool-updated/?itm_source=presentations_about_Spring-Boot&amp;itm_medium=link&amp;itm_campaign=Spring-Boot"&gt;the updates to the Spring Initializr tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I liked this post by Andriy Redko on &lt;a href="https://dzone.com/articles/testing-spring-boot-conditionals-the-sane-way"&gt;testing Spring Boot &lt;code&gt;Conditional&lt;/code&gt;s&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out Rajesh Bjojwani&amp;rsquo;s look at the &lt;a href="https://dzone.com/articles/pcf-26-feature-app-revisions"&gt;feature called App Revisions in Pivotal Cloud Foundry 2.6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Azul CTO Gil Tene on Java, JVMs, garbage collection, and a ton more</title>
    <link rel="alternate" href="https://spring.io/blog/2019/07/19/a-bootiful-podcast-azul-cto-gil-tene-on-java-jvms-garbage-collection-and-a-ton-more" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-07-19:3747</id>
    <updated>2019-07-19T07:42:45Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! Welcome to another installment of a Bootiful Podcast! In this week I&amp;rsquo;m joined by my old friend, Azul CTO, Gil Tene as we discuss Java, JVMs, garbage collection, and a ton more in this extra packed 90 minute-plus episode. &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://twitter.com/GilTene"&gt;Gil on Twitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.azul.com/"&gt;Azul Systems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.azul.com/products/zing/"&gt;Zing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/653361302&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - July 16, 2019</title>
    <link rel="alternate" href="https://spring.io/blog/2019/07/16/this-week-in-spring-july-16-2019" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-07-16:3746</id>
    <updated>2019-07-16T18:53:03Z</updated>
    <content type="html">&lt;p&gt;HI Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! I&amp;rsquo;ve just returned from Lima, Peru, for JConf Peru, and then today finished speaking at the SpringOne Tour Philadelphia event. Now, I&amp;rsquo;m off to Portland, OR, for the epic OSCON show. As usual, we&amp;rsquo;ve got tons to cover so let&amp;rsquo;s get to it! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/07/12/spring-tools-4-3-1-released"&gt;Spring Tools 4.3.1 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;In last week&amp;rsquo;s installment of &lt;a href="https://spring.io/blog/2019/07/12/a-bootiful-podcast-mike-amundsen-on-apis-http-rest-and-more"&gt;&lt;em&gt;A Bootiful Podcast&lt;/em&gt;, I interview Mr. REST / HATEOAS, Mike Amundsen, on APIs, HTTP, REST and more&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This is an interesting post &lt;a href="https://www.cloudfoundry.org/blog/orange-makes-novel-use-of-cloud-foundry-for-best-developer-experience/"&gt;on how Orange makes use of Cloud Foundry&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/1160"&gt;Check out this resolution for those using Spring Cloud Gateway and experiencing issues doing a retry &lt;code&gt;POST&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out &lt;a href="https://medium.com/netifi/rsocket-video-channel-on-youtube-d33f1562a493"&gt;the RSocket YouTube channel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Have you registered for SpringOne Platform 2019? &lt;a href="https://springoneplatform.io/register?utm_campaign=s1p-website-social&amp;utm_content=1561151675&amp;utm_medium=social-sprout&amp;utm_source=twitter"&gt;Do it&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This is amazing - &lt;a href="https://github.com/neo4j/sdn-rx"&gt;a new reactive Spring Data Neo4J implementation&lt;/a&gt; is coming!&lt;/li&gt;
  &lt;li&gt;Check this out - &lt;a href="https://content.pivotal.io/blog/introducing-rabbitmq-for-kubernetes"&gt;there&amp;rsquo;s now a Kubernetes-ready distribution of RabbitMQ&lt;/a&gt;. &lt;em&gt;Now&lt;/em&gt; it&amp;rsquo;s cloud-native!&lt;/li&gt;
  &lt;li&gt;I love the new Microsoft Azure API development guidelines which encourage the use of Project Reactor &lt;a href="https://azuresdkspecs.z5.web.core.windows.net/JavaSpec.html"&gt;to build elegant, asynchronous, reactive APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Here&amp;rsquo;s a nice post by JHipster lead and Azure Developer Advocate Julien Dubois on going &lt;a href="https://dev.to/azure/going-full-reactive-with-spring-webflux-and-the-new-cosmosdb-api-v3-1n2a"&gt;fully reactive with Spring Webflux and the new CosmosDB API v3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Tools 4.3.1 released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/07/12/spring-tools-4-3-1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Martin Lippert</name>
    </author>
    <id>tag:spring.io,2019-07-12:3745</id>
    <updated>2019-07-12T13:21:58Z</updated>
    <content type="html">&lt;p&gt;Dear Spring Community,&lt;/p&gt;
&lt;p&gt;I am happy to announce the 4.3.1 release of the Spring Tools 4 for Eclipse, Visual Studio Code, and Theia.&lt;/p&gt;
&lt;p&gt;Highlights from this release include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;(all language servers)&lt;/em&gt; performance: further improvements to the language server startup time&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; fixed: wrong error markers in properties files (&lt;a href="https://github.com/spring-projects/sts4/issues/314"&gt;#314&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(VS Code)&lt;/em&gt; fixed: vscode goto definition error with lsp (&lt;a href="https://github.com/spring-projects/sts4/issues/309"&gt;#309&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; fixed: STS4 can now be installed again into an existing Eclipse install when running on JDK8&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; fixed: deadlock when starting up the Spring Boot language server for workspaces with many projects&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; fixed: cannot launch apps in boot dashboard anymore when using early builds of Eclipse 2019-09 (4.13)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; improved, but not completely fixed yet: freeze when opening pom.xml file - if you still experience slowness here, please apply the workaround as documented in the issues comment (&lt;a href="https://github.com/spring-projects/sts4/issues/318#issuecomment-510851757"&gt;comment on #314&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To download the distribution for Eclipse and find links to the marketplace entries for Visual Studio Code and Theia, please go visit:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Tools 4: &lt;a href="https://spring.io/tools/"&gt;https://spring.io/tools/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Detailed changes can be found here: &lt;a href="https://github.com/spring-projects/sts4/wiki/Changelog#2019-07-12-431-release"&gt;https://github.com/spring-projects/sts4/wiki/Changelog#2019-07-12-431-release&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Tools 4.3.2 is scheduled to be released in late August 2019.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Mike Amundsen on APIs, HTTP, REST and more</title>
    <link rel="alternate" href="https://spring.io/blog/2019/07/12/a-bootiful-podcast-mike-amundsen-on-apis-http-rest-and-more" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-07-12:3744</id>
    <updated>2019-07-12T08:18:58Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! Welcome to another installment of a Bootiful Podcast! This week &lt;a href="http://twitter.com/starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt; talks to &amp;ldquo;Mr. REST&amp;rdquo; &lt;a href="http://twitter.com/mamund"&gt;Mike Amundsen (@mamund)&lt;/a&gt; to talk about APIs, Microservices, HATEOAS, HTTP and much more! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://twitter.com/mamund"&gt;Mike on Twitter (@mamund)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/650006849&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - July 9th, 2019</title>
    <link rel="alternate" href="https://spring.io/blog/2019/07/09/this-week-in-spring-july-9th-2019" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-07-09:3743</id>
    <updated>2019-07-09T18:34:49Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! I&amp;rsquo;ve just returned from Medell√≠n, Columbia, yesterday, and am now in sunny Chicago for the epic SpringOne Tour Chicago event. And tomorrow, it&amp;rsquo;s off to Lima, Peru. It&amp;rsquo;s figuring to be quite a week! &lt;/p&gt;
&lt;p&gt;As usual, we&amp;rsquo;ve got a lot to get to so let&amp;rsquo;s do! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/07/09/spring-cloud-data-flow-2-2-0-m1-released"&gt;Spring Cloud Data Flow 2.2.0.M1 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Hi Spring fans! In last week&amp;rsquo;s extra special &lt;a href="https://spring.io/blog/2019/07/05/a-bootiful-podcast-dr-venkat-subramaniam-on-kotlin-the-future-of-java-spring-open-source-being-productive-and-awesome-and-so-much-more"&gt;&lt;em&gt;A Bootiful Podcast&lt;/em&gt;, I interview friend and teacher-extraordinairre, the one, the only, the inimitable, the amazing Dr. Venkat Subramaniam on Kotlin, the future of Java, Spring, open-source, being productive and awesome, and so much more.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/07/04/explore-the-project-on-start-spring-io"&gt;Explore a newly-generated project on start.spring.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/07/03/spring-cloud-hoxton-m1-is-available"&gt;Spring Cloud Hoxton.M1 is available.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/07/03/spring-boot-for-apache-geode-pivotal-gemfire-1-1-0-m3-released"&gt;Spring Boot for Apache Geode &amp;amp; Pivotal GemFire 1.1.0.M3 Released!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I love seeing that DICKS sporting-goods is experiencing such great success with &lt;a href="https://twitter.com/cloudfoundry/status/1148617619915677696"&gt;Pivotal Cloud Foundry&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I dig the new Source{d} release; seems like an interesting option to enable oversight over the entire Software Defined Lifecycle&lt;/li&gt;
  &lt;li&gt;Have you booked your tickets to &lt;a href="https://springoneplatform.io/register"&gt;SpringOne Platform in Austin this year&lt;/a&gt;?&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/springcloud/status/1148363965833056257"&gt;https://twitter.com/springcloud/status/1148363965833056257&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Nice post introducing &lt;a href="http://blog.florian-hopf.de/2019/07/apache-camel.html"&gt;Application Integration with Apache Camel &lt;/a&gt; in terms of Spring Boot, of course.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/springcentral/status/1147257596883197953"&gt;Rohit Kelapure has a nice post on what it takes to transform an application to a modern cloud-native application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=mAVSrb7Xrm8"&gt;Check out this great talk by ING on their use of Spring Boot and Kafka&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Data Flow 2.2.0.M1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/07/09/spring-cloud-data-flow-2-2-0-m1-released" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Ilayaperumal Gopinathan</name>
    </author>
    <id>tag:spring.io,2019-07-08:3742</id>
    <updated>2019-07-09T14:52:33Z</updated>
    <content type="html">&lt;p&gt;The &lt;a href="https://cloud.spring.io/spring-cloud-dataflow/"&gt;Spring Cloud Data Flow&lt;/a&gt; team is pleased to announce the milestone release 2.2.0.M1.&lt;/p&gt;
&lt;p&gt;Along with some enhancements and bug fixes, here are some of the highlights of the release:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Metrics for Tasks&lt;/strong&gt;&lt;br/&gt;Metrics and monitoring continue to be one of the important themes for Spring Cloud Data Flow. Building upon the InfluxDB integration that we have for streams, in 2.2, we are adding support for Tasks, too. The core of the Micrometer integration landed in Spring Cloud Task&amp;rsquo;s 2.2.0 release-line, which by the way is a requirement if you are going to try out the Task-metrics and the SCDF integration.&lt;/p&gt;
&lt;p&gt;For convenience, we have a &lt;a href="https://github.com/tzolov/task-demo-metrics/blob/master/README.md"&gt;sample application&lt;/a&gt; that builds on the compatible upstream versions of Spring Boot, Spring Batch, and Spring Cloud Task. With this application launched in SCDF, you are now able to instrument metrics with InfluxDB as the backend, and likewise visualize the statistics through Grafana dashboard as shown below. &lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/tzolov/task-demo-metrics/master/docs/grafana-task.png" alt="Screenshot" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application Logs&lt;/strong&gt;&lt;br/&gt;A set of REST endpoints are now available to access the application logs of stream and task applications. Currently, this is available for applications running in Cloud Foundry and Kubernetes platforms. In the upcoming releases, we&amp;rsquo;ll have the Dashboard access to viewing the stream/task application logs along with the Local platform support.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Patching Database Drivers&lt;/strong&gt;&lt;br/&gt;The community members and the customers who attempted to patch Spring Cloud Data Flow with proprietary database drivers have had the option to clone and build the project locally. There&amp;rsquo;s another option, though. The procedure is now &lt;a href="https://docs.spring.io/spring-cloud-dataflow/docs/2.2.0.M1/reference/htmlsingle/#_adding_a_custom_jdbc_driver"&gt;documented&lt;/a&gt; for both Maven and Gradle users.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Acceptance Tests&lt;/strong&gt;&lt;br/&gt;To further improve the quality of software that we build and to have more confidence in what we ship, we have invested time to cycle through and overhaul the acceptance-tests. We are now continually running the acceptance-tests on Local, Pivotal Cloud Foundry, Kubernetes (GKE), and PKS. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Developer Recipes&lt;/strong&gt;&lt;br/&gt;Apache Kafka, RabbitMQ, File-ingest and ETL in K8s/CF, and Amazon Kinesis recipes are now available in the latest Spring Cloud Data Flow &lt;a href="https://dataflow.spring.io/"&gt;website&lt;/a&gt;. Given all the content is coded as markdown files, it is easy for the community to contribute, so feel free to start the dialog with pull-requests - we are looking forward to your contributions &lt;a href="https://github.com/spring-io/dataflow.spring.io"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="#stay-in-touch-hellip" class="anchor" name="stay-in-touch-hellip"&gt;&lt;/a&gt;Stay in touch&amp;hellip;&lt;/h2&gt;
&lt;p&gt;As always, we welcome feedback and contributions, so please reach out to us on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud-dataflow"&gt;Stackoverflow&lt;/a&gt; or &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow/issues"&gt;GitHub&lt;/a&gt; or via &lt;a href="https://gitter.im/spring-cloud/spring-cloud-dataflow"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Dr. Venkat Subramaniam on Kotlin, the future of Java, Spring, open-source, being productive and awesome, and so much more.</title>
    <link rel="alternate" href="https://spring.io/blog/2019/07/05/a-bootiful-podcast-dr-venkat-subramaniam-on-kotlin-the-future-of-java-spring-open-source-being-productive-and-awesome-and-so-much-more" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-07-05:3741</id>
    <updated>2019-07-05T02:40:52Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Happy 4th to those of you who celebrate. In today&amp;rsquo;s episode, I talk to the man, the myth, the legend, the good Dr. Venkat Subramaniam on Kotlin, the future of Java, Spring, open-source, being productive and awesome, and so much more. &lt;/p&gt;
&lt;iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/646455324&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"&gt;&lt;/iframe&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://twitter.com/Venkat_S"&gt;Dr. Subramaniam on Twitter (@venkat_s)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/starbuxman/status/1103810728883040256"&gt;a tweet asking that whatever recording I do&lt;/a&gt; with Dr. Subramaniam for the Bootiful Podcast be longer than an hour (wish granted!)&lt;/li&gt;
  &lt;li&gt;The image from today&amp;rsquo;s episode comes from a joint-talk that the good Dr. Subramaniam and I did in Atlanta, GA for the epic Devnexus conference. I am using the photo from &lt;a href="https://twitter.com/mraible/status/1103692771028803590"&gt;Matt Raible&amp;rsquo;s tweet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Dr. Subramaniam&amp;rsquo;s new book, &lt;a href="https://pragprog.com/book/vskotlin/programming-kotlin"&gt;&lt;em&gt;Programming Kotlin&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Explore the project on start.spring.io</title>
    <link rel="alternate" href="https://spring.io/blog/2019/07/04/explore-the-project-on-start-spring-io" />
    <category term="releases" label="Releases" />
    <author>
      <name>Damien Vitrac</name>
    </author>
    <id>tag:spring.io,2019-07-03:3738</id>
    <updated>2019-07-04T11:35:58Z</updated>
    <content type="html">&lt;p&gt;Introducing the new feature on &lt;a href="https://start.spring.io"&gt;start.spring.io&lt;/a&gt;: &lt;strong&gt;Explore the project&lt;/strong&gt;.&lt;br/&gt;With this, you can now take a peek at the generated project files without having to actually download it, unzip it, etc. &lt;/p&gt;
&lt;p&gt;A lot of developers &lt;strong&gt;requested this feature&lt;/strong&gt;, because they&amp;rsquo;d like to compare with another project, or upgrade an existing application. We&amp;rsquo;d like to explore those possibilities more in the future, so &lt;strong&gt;send your feedback our way&lt;/strong&gt;!&lt;/p&gt;
&lt;img src="https://static.spring.io/blog/damienvitrac/20190703/explore.png" /&gt;
&lt;p&gt;&lt;strong&gt;Explore the project:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Depending on the project, the &lt;strong&gt;pom.xml&lt;/strong&gt; / &lt;strong&gt;build.gradle&lt;/strong&gt; / &lt;strong&gt;build.gradle.kts&lt;/strong&gt; will be shown by default&lt;/li&gt;
  &lt;li&gt;Highlighting code (1), preview markdown&lt;/li&gt;
  &lt;li&gt;Copy and download a file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(1) Supported: Javascript, Markdown, Kotlin, Gradle, Gitignore, Java, XML, Properties, Groovy&lt;/p&gt;
&lt;p&gt;Note that this &lt;strong&gt;first version of the feature is not always mobile friendly&lt;/strong&gt; and that we&amp;rsquo;re collecting feedback as a first step.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;We appreciate &lt;strong&gt;everyone&amp;rsquo;s help and feedback&lt;/strong&gt; as we continue learning and iterating on the site and the initializr library. &lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Hoxton.M1 is available.</title>
    <link rel="alternate" href="https://spring.io/blog/2019/07/03/spring-cloud-hoxton-m1-is-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Spencer Gibb</name>
    </author>
    <id>tag:spring.io,2019-07-03:3740</id>
    <updated>2019-07-03T22:42:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the community, I am pleased to announce that Milestone 1 (M1) of the &lt;a href="https://spring.io/projects/spring-cloud"&gt;Spring Cloud Hoxton&lt;/a&gt; Release Train is available today. The release can be found in &lt;a href="https://repo.spring.io/milestone/"&gt;Spring Milestone&lt;/a&gt; repository. You can check out the &lt;a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Hoxton-Release-Notes"&gt;Hoxton release notes&lt;/a&gt; for more information.&lt;/p&gt;&lt;h2&gt;&lt;a href="#notable-changes-in-the-hoxton-release-train" class="anchor" name="notable-changes-in-the-hoxton-release-train"&gt;&lt;/a&gt;Notable Changes in the Hoxton Release Train&lt;/h2&gt;
&lt;p&gt;This milestone release is compatible with Spring Boot 2.2.0.M4.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-gateway" class="anchor" name="spring-cloud-gateway"&gt;&lt;/a&gt;Spring Cloud Gateway&lt;/h3&gt;
&lt;p&gt;Spring Cloud Gateway has added support for &lt;a href="http://rsocket.io"&gt;RSocket&lt;/a&gt;. Look for more in an upcoming blog post.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-contract" class="anchor" name="spring-cloud-contract"&gt;&lt;/a&gt;Spring Cloud Contract&lt;/h3&gt;
&lt;p&gt;Gradle support has been updated to 5.5, and Groovy to version 2.5. A major refactoring has happened, simplifying and rewriting to Java where possible.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-cloudfoundry" class="anchor" name="spring-cloud-cloudfoundry"&gt;&lt;/a&gt;Spring Cloud Cloudfoundry&lt;/h3&gt;
&lt;p&gt;An option to use Cloud Foundry DNS-based discovery was added. This is useful for container-to container-networking.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-config" class="anchor" name="spring-cloud-config"&gt;&lt;/a&gt;Spring Cloud Config&lt;/h3&gt;
&lt;p&gt;Support was added for Google Cloud Source (a Git host) and a new Redis environment repository.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-sleuth" class="anchor" name="spring-cloud-sleuth"&gt;&lt;/a&gt;Spring Cloud Sleuth&lt;/h3&gt;
&lt;p&gt;Sleuth now imports the Brave BOM.&lt;/p&gt;&lt;h2&gt;&lt;a href="#roadmap" class="anchor" name="roadmap"&gt;&lt;/a&gt;Roadmap&lt;/h2&gt;
&lt;p&gt;The Spring Cloud Circuit Breaker project will move out of Incubator status. Spring Cloud Loadbalancer will be updated to plug holes left by Ribbon being placed in maintenance mode in Spring Cloud Netflix. Spring Cloud Gateway RSocket support will continue to improve.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;The following modules were updated as part of Hoxton.M1:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Module &lt;/th&gt;
      &lt;th&gt;Version &lt;/th&gt;
      &lt;th&gt;Issues&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Commons &lt;/td&gt;
      &lt;td&gt;2.2.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-commons/milestone/59?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Contract &lt;/td&gt;
      &lt;td&gt;2.2.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-contract/milestone/50?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Cloudfoundry &lt;/td&gt;
      &lt;td&gt;2.2.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-cloudfoundry/milestone/13?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Openfeign &lt;/td&gt;
      &lt;td&gt;2.2.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-openfeign/milestone/13?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Security &lt;/td&gt;
      &lt;td&gt;2.2.0.M1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Config &lt;/td&gt;
      &lt;td&gt;2.2.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-config/milestone/63?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Stream &lt;/td&gt;
      &lt;td&gt;Horsham.M2 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Aws &lt;/td&gt;
      &lt;td&gt;2.2.0.M1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Bus &lt;/td&gt;
      &lt;td&gt;2.2.0.M1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Zookeeper &lt;/td&gt;
      &lt;td&gt;2.2.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-zookeeper/milestone/26?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Task &lt;/td&gt;
      &lt;td&gt;2.2.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-task/milestone/35?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Gateway &lt;/td&gt;
      &lt;td&gt;2.2.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-gateway/milestone/25?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Sleuth &lt;/td&gt;
      &lt;td&gt;2.2.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-sleuth/milestone/57?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Consul &lt;/td&gt;
      &lt;td&gt;2.2.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-consul/milestone/40?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Netflix &lt;/td&gt;
      &lt;td&gt;2.2.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-netflix/milestone/77?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Gcp &lt;/td&gt;
      &lt;td&gt;1.2.0.M1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Function &lt;/td&gt;
      &lt;td&gt;3.0.0.M1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Vault &lt;/td&gt;
      &lt;td&gt;2.2.0.M1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Kubernetes &lt;/td&gt;
      &lt;td&gt;1.1.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-kubernetes/milestone/12?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As always, we welcome feedback on &lt;a href="https://github.com/spring-cloud/"&gt;GitHub&lt;/a&gt;, on &lt;a href="https://gitter.im/spring-cloud/spring-cloud"&gt;Gitter&lt;/a&gt;, on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud"&gt;Stack Overflow&lt;/a&gt;, or on &lt;a href="https://twitter.com/SpringCloud"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To get started with Maven with a BOM (dependency management only):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&amp;lt;repositories&amp;gt;&#xD;
    &amp;lt;repository&amp;gt;&#xD;
        &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt;&#xD;
        &amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt;&#xD;
        &amp;lt;url&amp;gt;https://repo.spring.io/milestone&amp;lt;/url&amp;gt;&#xD;
        &amp;lt;snapshots&amp;gt;&#xD;
            &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;&#xD;
        &amp;lt;/snapshots&amp;gt;&#xD;
    &amp;lt;/repository&amp;gt;&#xD;
&amp;lt;/repositories&amp;gt;&#xD;
&amp;lt;dependencyManagement&amp;gt;&#xD;
    &amp;lt;dependencies&amp;gt;&#xD;
        &amp;lt;dependency&amp;gt;&#xD;
            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
            &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;&#xD;
            &amp;lt;version&amp;gt;Hoxton.M1&amp;lt;/version&amp;gt;&#xD;
            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xD;
            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xD;
        &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;/dependencies&amp;gt;&#xD;
&amp;lt;/dependencyManagement&amp;gt;&#xD;
&amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-cloud-starter-config&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-eureka-client&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
    ...&#xD;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or with Gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;buildscript {&#xD;
    dependencies {&#xD;
        classpath &amp;quot;io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE&amp;quot;&#xD;
    }&#xD;
}&#xD;
&#xD;
repositories {&#xD;
    maven {&#xD;
        url &amp;#39;https://repo.spring.io/milestone&amp;#39;&#xD;
    }&#xD;
}&#xD;
&#xD;
apply plugin: &amp;quot;io.spring.dependency-management&amp;quot;&#xD;
&#xD;
dependencyManagement {&#xD;
    imports {&#xD;
        mavenBom &amp;#39;org.springframework.cloud:spring-cloud-dependencies:Hoxton.M1&amp;#39;&#xD;
    }&#xD;
}&#xD;
&#xD;
dependencies {&#xD;
    compile &amp;#39;org.springframework.cloud:spring-cloud-starter-config&amp;#39;&#xD;
    compile &amp;#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&amp;#39;&#xD;
    ...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot for Apache Geode &amp; Pivotal GemFire 1.1.0.M3 Released!</title>
    <link rel="alternate" href="https://spring.io/blog/2019/07/03/spring-boot-for-apache-geode-pivotal-gemfire-1-1-0-m3-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>John Blum</name>
    </author>
    <id>tag:spring.io,2019-07-03:3739</id>
    <updated>2019-07-03T18:46:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the Spring, Apache Geode and Pivotal communities, I am pleased to announce the release of &lt;em&gt;Spring Boot for Apache Geode &amp;amp; Pivotal GemFire&lt;/em&gt; &lt;code&gt;1.1.0.M3&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="whats-new"&gt;&lt;a class="anchor" href="#whats-new"&gt;&lt;/a&gt;What&amp;#8217;s New&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The main theme of this release was to add support for hybrid cloud deployments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;For instance, perhaps you want to push and run your Spring Boot, Apache Geode or Pivotal GemFire applications on &lt;a href="https://pivotal.io/platform"&gt;Pivotal CloudFoundry&lt;/a&gt; (PCF), but connect those applications to an externally managed, standalone Apache Geode or Pivotal GemFire cluster.  Now, SBDG allows you to do just that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Technically, SBDG takes advantage of a feature in PCF called &lt;a href="https://docs.pivotal.io/pivotalcf/2-6/devguide/services/user-provided.html"&gt;CUPS&lt;/a&gt;, or &lt;em&gt;Create User-Provided Service&lt;/em&gt;.  By defining your own service descriptor you can connect your Spring Boot applications to externally managed services, like databases, message queues and even In-Memory Data Grids &amp;amp; Caches like &lt;a href="https://geode.apache.org/"&gt;Apache Geode&lt;/a&gt; or &lt;a href="https://pivotal.io/pivotal-gemfire"&gt;Pivotal GemFire&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;By following a prescribed service descriptor format, it makes it simple to switch to a platform managed service like &lt;a href="https://pivotal.io/pivotal-cloud-cache"&gt;Pivotal Cloud Cache&lt;/a&gt; when you need it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Indeed, we believe this is an important stepping stone for users making their way to a &lt;strong&gt;Cloud-Native&lt;/strong&gt; platform, like PCF, where they still have much invested in their legacy architectures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We do highly recommend using a managed service like &lt;a href="https://pivotal.io/pivotal-cloud-cache"&gt;Pivotal Cloud Cache&lt;/a&gt; for your application and Microservices caching needs, but we also realize that making this switch is not as easy as flipping the switch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We want to help you get there.  After all, &lt;strong&gt;Cloud-Native (Data) Patterns&lt;/strong&gt; are crucial to the modern application architecture, particularly when talking about things like high availability and resiliency as well as making effective use of your computing resources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can learn more about this new support in the &lt;a href="https://docs.spring.io/spring-boot-data-geode-build/1.1.x/reference/html5/#cloudfoundry-geode"&gt;Reference Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In addition to hybrid cloud support, we also added:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Auto-configuration for logging.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support to target specific Pivotal Cloud Cache (PCC) service instances when multiple instances are bound to your Spring Boot app.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upgrades to Spring Boot &lt;code&gt;2.1.6.RELEASE.&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upgrade to &lt;em&gt;Spring Test for Apache Geode &amp;amp; Pivotal GemFire&lt;/em&gt; (STDG) &lt;code&gt;0.0.5.RELEASE&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See the &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/blob/1.1.0.M3/spring-geode/src/main/resources/changelog.txt#L7-L21"&gt;changelog&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="whats-next"&gt;&lt;a class="anchor" href="#whats-next"&gt;&lt;/a&gt;What&amp;#8217;s Next&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We will push towards our first release candidate, an SBDG &lt;code&gt;1.1.0.RC1&lt;/code&gt;, by mid-July and final GA by end of July.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Specifically, we will be:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Adding a couple of samples:&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Example for &lt;em&gt;Inline Caching&lt;/em&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Example on how to get started in under 5 minutes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved Documentation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Incorporating your Feedback&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="conclusion"&gt;&lt;a class="anchor" href="#conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As always, feedback is welcomed and appreciated.  Let us know what you think and give the new bits a try.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-boot-data-geode/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/pulls"&gt;PR&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-boot"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - July 2nd, 2019</title>
    <link rel="alternate" href="https://spring.io/blog/2019/07/03/this-week-in-spring-july-2nd-2019" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-07-03:3737</id>
    <updated>2019-07-03T01:26:03Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week I&amp;rsquo;m sunny summer-time San Francisco indulging in a little downtime. Last week was a doozy! I visited Tampa, Flordia; Paris, France; and finally Santiago, Dominican Republic. Later this week, after the 4th of July holiday here in the States, I&amp;rsquo;ll head on over to Medellin, Columbia for JConf Columbia; Chicago, Illinois for the epic SpringOne Tour Chicago event; and then Lima, Peru for the JConf Peru event. &lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m so looking forward to a few weeks of fun talking to amazing developers around the globe. If you&amp;rsquo;re around, as usual, don&amp;rsquo;t hesitate to reach out to me on &lt;a href="http://twitter.com/Starbuxman"&gt;@starbuxman&lt;/a&gt; on Twitter.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve got a ton of good stuff to get to this week so let&amp;rsquo;s dive right in!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/07/01/hiding-services-runtime-discovery-with-spring-cloud-gateway"&gt;Hiding Services &amp;amp; Runtime Discovery with Spring Cloud Gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/07/01/spring-cloud-open-service-broker-3-1-0-m1-released"&gt;Spring Cloud Open Service Broker 3.1.0.M1 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/07/01/spring-cloud-open-service-broker-3-0-3-released"&gt;Spring Cloud Open Service Broker 3.0.3 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/07/01/spring-vault-2-1-3-release-available"&gt;Spring Vault 2.1.3.RELEASE available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/06/27/spring-cloud-greenwich-sr2-is-available"&gt;Spring Cloud Greenwich.SR2 is available.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Hi Spring fans! In last week&amp;rsquo;s a &lt;a href="https://spring.io/blog/2019/06/27/a-bootiful-podcast-datadog-s-jason-yee-on-observability-operations-metrics-kubernetes-language-and-more"&gt;&lt;em&gt;Bootiful Podcast&lt;/em&gt;, I talk to Datadog&amp;rsquo;s Jason Yee on observability, operations, metrics, Kubernetes, language and more&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/06/26/spring-tips-season-6-recap"&gt;Spring Tips - Season 6 Recap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;What is PaaS? Platform-as-a-Service Types Explained&lt;/em&gt; &lt;a href="https://www.javacodegeeks.com/2019/06/paas-platform-service-types-explained.html"&gt; on the Java Code Geeks blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This is an interesting thread over on Twitter looking at &lt;a href="https://twitter.com/dormaindrewitz/status/1143972958173450240?s=12"&gt;why you might choose RabbitMQ over Apache Kafka and vice-versa&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Have you registered for &lt;a href="https://twitter.com/springcentral/status/1143984541117353985"&gt;SpringOne Platform 2019?&lt;/a&gt; Do not miss this year&amp;rsquo;s bigger-and-better-than-ever edition of SpringOne Platform!&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Hiding Services &amp; Runtime Discovery with Spring Cloud Gateway</title>
    <link rel="alternate" href="https://spring.io/blog/2019/07/01/hiding-services-runtime-discovery-with-spring-cloud-gateway" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Ben Wilcock</name>
    </author>
    <id>tag:spring.io,2019-07-01:3733</id>
    <updated>2019-07-01T16:57:00Z</updated>
    <content type="html">&lt;p&gt;&lt;a href="https://twitter.com/benbravo73"&gt;Ben Wilcock&lt;/a&gt; ‚Äì Spring Marketing, Pivotal.&lt;br/&gt;&lt;a href="https://twitter.com/BrianMMcClain"&gt;Brian McClain&lt;/a&gt; ‚Äì Technical Marketing, Pivotal.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s rare for a company to want &lt;em&gt;every&lt;/em&gt; API to be publicly accessible. Most prefer to keep their services secret by default, only exposing APIs publicly when absolutely necessary. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/guides/gs/gateway/"&gt;Spring Cloud Gateway&lt;/a&gt; can help. Spring Cloud Gateway allows you to route traffic to your APIs using simple Java‚Ñ¢ instructions (which we saw &lt;a href="https://content.pivotal.io/practitioners/getting-started-with-spring-cloud-gateway-3"&gt;in the last article&lt;/a&gt;) or with YAML configuration files (which we‚Äôll demonstrate in this one). To hide your services, you set up your network so that the only server accessible from the outside is the gateway. The gateway then becomes a gate-keeper, controlling ingress and egress from outside. It‚Äôs a very popular pattern.&lt;/p&gt;
&lt;p&gt;Cloud-based services also have a habit of changing location and granularity without much warning. To cope better with this, you can combine a gateway with a service registry to allow the applications on your network to find each other dynamically at runtime. If you do this, your applications will be much more resilient to changes. &lt;a href="https://spring.io/guides/gs/service-registration-and-discovery/"&gt;Spring Cloud Netflix Eureka Server&lt;/a&gt; is one such service registry.&lt;/p&gt;
&lt;p&gt;In this post, we&amp;rsquo;ll look at Spring Cloud‚Äôs gateway and registry components and illustrate how you can use them together to make your applications more secure and more reliable. &lt;/p&gt;
&lt;p&gt;Because this arrangement requires a particular setup, we‚Äôve provided ready-to-run code which you can download and run. We‚Äôll be using Docker to orchestrate our services and emulate a private network. We‚Äôll then talk to our running services using HTTPie.&lt;/p&gt;&lt;h2&gt;&lt;a href="#things-you-rsquo-ll-need" class="anchor" name="things-you-rsquo-ll-need"&gt;&lt;/a&gt;Things You&amp;rsquo;ll Need&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
  &lt;p&gt;Java (version 8 is assumed), plus your favorite web browser and terminal applications.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;a href="https://github.com/benwilcock/spring-cloud-gateway-demo.git"&gt;The Source Code&lt;/a&gt; ‚Äì There‚Äôs no need to write any code this time, simply &lt;code&gt;git clone&lt;/code&gt; (or download and &lt;code&gt;unzip&lt;/code&gt;) &lt;a href="https://github.com/benwilcock/spring-cloud-gateway-demo.git"&gt;this project&amp;rsquo;s source code repository&lt;/a&gt; from GitHub.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;a href="https://www.docker.com/products/docker-desktop"&gt;Docker Desktop&lt;/a&gt; ‚Äì Docker will provide our pseudo-production environment. We&amp;rsquo;ll use it to hide our services in a private network.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;a href="https://buildpacks.io/docs/app-journey/"&gt;Cloud Native Buildpacks&lt;/a&gt; ‚Äì We&amp;rsquo;ll use Cloud Native Buildpacks to build Docker container images for us. Buildpacks embody several DevOps best practices, including hardened open-source operating systems and free to use OpenJDK distributions.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;About 10-15 minutes, depending on the speed of your internet, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#let-s-get-started-hellip" class="anchor" name="let-s-get-started-hellip"&gt;&lt;/a&gt;Let‚Äôs Get Started&amp;hellip;&lt;/h2&gt;&lt;h4&gt;&lt;a href="#step-1" class="anchor" name="step-1"&gt;&lt;/a&gt;Step 1:&lt;/h4&gt;
&lt;p&gt;Download and install all the &amp;ldquo;things you&amp;rsquo;ll need&amp;rdquo; from the list above. Then change to the runtime-discovery folder in the source code as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;cd runtime-discovery
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;a href="#step-2" class="anchor" name="step-2"&gt;&lt;/a&gt;Step 2:&lt;/h4&gt;
&lt;p&gt;Build &amp;amp; package the gateway, registry, and service into JARs using Maven, and then create Docker containers for each of them. We have provided a handy &lt;a href="https://github.com/benwilcock/spring-cloud-gateway-demo/blob/master/runtime-discovery/pack-images.sh"&gt;pack-images&lt;/a&gt; script to do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt; ./pack-images.sh
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;a href="#step-3" class="anchor" name="step-3"&gt;&lt;/a&gt;Step 3:&lt;/h4&gt;
&lt;p&gt;Start up the Docker test environment in the background. We‚Äôre using docker-compose here as it can start multiple containers and create a private network for them to communicate on:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;a href="#step-4" class="anchor" name="step-4"&gt;&lt;/a&gt;Step 4:&lt;/h4&gt;
&lt;p&gt;Wait. Docker will start all the containers (using the configuration provided in the &lt;a href="https://github.com/benwilcock/spring-cloud-gateway-demo/blob/master/runtime-discovery/docker-compose.yml"&gt;docker-compose.yml&lt;/a&gt; file). Waiting a couple of extra minutes here is advised. It gives Docker time to start everything and gives the applications a chance to communicate and settle down. If you do wait, you should see the Gateway and the Greeting Service register themselves with the Registry. There will be lots of logs, but within them will be lines like these from the registry:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;registry    | 2019-06-28 12:19:01.780  INFO 1 --- [nio-8761-exec-2] c.n.e.registry.AbstractInstanceRegistry  : Registered instance REGISTRY/db1d80613789:registry:8761 with status UP (replication=false)&#xD;
registry    | 2019-06-28 12:19:02.380  INFO 1 --- [nio-8761-exec-6] c.n.e.registry.AbstractInstanceRegistry  : Registered instance GATEWAY/9c0c0c9ba027:gateway:8760 with status UP (replication=true)&#xD;
registry    | 2019-06-28 12:19:02.382  INFO 1 --- [nio-8761-exec-6] c.n.e.registry.AbstractInstanceRegistry  : Registered instance SERVICE/fe7e38b21cac:service:8762 with status UP (replication=true)
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#let-rsquo-s-try-it-hellip" class="anchor" name="let-rsquo-s-try-it-hellip"&gt;&lt;/a&gt;Let&amp;rsquo;s Try It&amp;hellip;&lt;/h2&gt;&lt;h4&gt;&lt;a href="#first-check-that-the-greeting-service-is-hidden" class="anchor" name="first-check-that-the-greeting-service-is-hidden"&gt;&lt;/a&gt;First, Check that the Greeting Service is Hidden:&lt;/h4&gt;
&lt;p&gt;The Greeting Service operates on port &lt;code&gt;8762&lt;/code&gt; and is hidden inside the Docker network. Let&amp;rsquo;s try to call it from your favorite browser using &lt;a href="http://localhost:8762/greeting"&gt;http://localhost:8762/greeting&lt;/a&gt;. You should be told that &amp;ldquo;the site can&amp;rsquo;t be reached&amp;rdquo; by your browser. This is because the Greeting Service is hidden inside the Docker network (as if it were behind a company firewall). It shouldn&amp;rsquo;t be possible for us to talk to the greeting service directly. Instead, you‚Äôll see an error page similar to the one below.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://static.spring.io/blog/bwilcock/20190701/unreachable.png" alt="Screenshot from the browser window showing that the service is unreachable" title="Screenshot from the browser window showing that the service is unreachable" /&gt;&lt;/p&gt;&lt;h4&gt;&lt;a href="#next-access-the-greeting-service-via-the-gateway" class="anchor" name="next-access-the-greeting-service-via-the-gateway"&gt;&lt;/a&gt;Next, Access the Greeting Service via the Gateway:&lt;/h4&gt;
&lt;p&gt;Now, Navigate your browser to &lt;a href="http://localhost:8080/service/greeting"&gt;http://localhost:8080/service/greeting&lt;/a&gt;. You should now get a valid response with content similar to the &amp;ldquo;Hello, World&amp;rdquo; JSON shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint json"&gt;{ &amp;quot;id&amp;quot;: 1, &amp;quot;content&amp;quot;: &amp;quot;Hello, World!&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you issued this new HTTP request from your browser, it was sent to, and handled by, the Gateway. The Gateway service &lt;em&gt;is&lt;/em&gt; publicly accessible (it‚Äôs mapped to port &lt;code&gt;8080&lt;/code&gt;). Your request was forwarded by the Gateway to the Greeting Service on your behalf, and the response was then routed back to you by the Gateway.&lt;/p&gt;&lt;h4&gt;&lt;a href="#now-view-the-registry-of-services" class="anchor" name="now-view-the-registry-of-services"&gt;&lt;/a&gt;Now, View the Registry of Services:&lt;/h4&gt;
&lt;p&gt;The microservices on the Docker network are each registering themselves with the Registry server (this may take a couple of minutes, so be patient). The Registry server acts an address book for the services. If the services move, or if new instances are created, they will add themselves to the registry.&lt;/p&gt;
&lt;p&gt;To view the current list of registered services, point your browser at &lt;a href="http://localhost:8080/registry"&gt;http://localhost:8080/registry&lt;/a&gt;. You should see a screen similar to the one below.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://static.spring.io/blog/bwilcock/20190701/registry.png" alt="Screenshot from the Registry console, listing several services" title="Screenshot showing the Eureka registry console window in a browser" /&gt;&lt;/p&gt;&lt;h4&gt;&lt;a href="#finally-shutting-down" class="anchor" name="finally-shutting-down"&gt;&lt;/a&gt;Finally, Shutting Down:&lt;/h4&gt;
&lt;p&gt;When you&amp;rsquo;re done, use &lt;code&gt;ctrl-C&lt;/code&gt; in your terminal to shut down the Docker services. If for any reason this fails to work, you can also use &lt;code&gt;docker-compose down&lt;/code&gt; from the &lt;code&gt;runtime-discovery&lt;/code&gt; folder. Using either technique, you should see output similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;Stopping gateway  ... done&#xD;
Stopping service  ... done&#xD;
Stopping registry ... done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Further clean-up can be achieved using &lt;code&gt;docker-compose rm -f&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#how-it-works" class="anchor" name="how-it-works"&gt;&lt;/a&gt;How It Works&lt;/h2&gt;
&lt;p&gt;In this demo, we have 3 servers. These servers are all running inside a &amp;ldquo;hidden&amp;rdquo; network which is provided by &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt;. Only the &lt;a href="https://github.com/benwilcock/spring-cloud-gateway-demo/tree/master/runtime-discovery/gateway"&gt;Gateway server&lt;/a&gt; is exposed to the outside world, so all HTTP traffic must go via this Gateway.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a description of the 3 servers and what each does&amp;hellip;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;a href="https://github.com/benwilcock/spring-cloud-gateway-demo/tree/master/runtime-discovery/gateway"&gt;The Gateway&lt;/a&gt; ‚Äì acts as our gatekeeper for all HTTP traffic. All inbound and outbound traffic flows through this portal ‚Äì it acts as the bridge between the outside world (your browser) and the services on the internal Docker network. The Gateway has a configuration that specifies routes which can be used to talk to the services inside the network. These routes use the &amp;lsquo;logical&amp;rsquo; names of the target services. These logical names are turned into real addresses by the Registry server.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;a href="https://github.com/benwilcock/spring-cloud-gateway-demo/tree/master/runtime-discovery/registry"&gt;The Registry&lt;/a&gt; ‚Äì acts as a phone book of all the services on the hidden network. It allows the Gateway to find the Greeting Service using only its logical name.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;a href="https://github.com/benwilcock/spring-cloud-gateway-demo/tree/master/runtime-discovery/service"&gt;The Greeting Service&lt;/a&gt; ‚Äì is a simple REST service based on the popular Spring.io guide &amp;ldquo;&lt;a href="https://spring.io/guides/gs/rest-service/"&gt;Building a RESTful Web Service&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you can see in the &lt;a href="https://github.com/benwilcock/spring-cloud-gateway-demo/blob/master/runtime-discovery/docker-compose.yml"&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/a&gt;, Docker is configured to only allow external calls to reach the Gateway ‚Äì on port &lt;code&gt;80&lt;/code&gt;. The other servers (the Registry, and the Greeting Service), cannot be reached directly from outside.&lt;/p&gt;
&lt;p&gt;The Gateway&amp;rsquo;s configured URL passthrough paths can be seen in the Gateway&amp;rsquo;s &lt;a href="https://github.com/benwilcock/spring-cloud-gateway-demo/blob/master/runtime-discovery/gateway/src/main/resources/application.yml"&gt;application.yml file&lt;/a&gt;. This configuration is using the &amp;ldquo;logical&amp;rdquo; names of these servers and the &lt;code&gt;lb:&lt;/code&gt; (load balancer) protocol as shown in the extract below:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint yaml"&gt;spring:&#xD;
  application:&#xD;
    name: gateway  &#xD;
  cloud:&#xD;
    gateway:&#xD;
      routes:&#xD;
      - id: service&#xD;
        uri: lb://service&#xD;
        predicates:&#xD;
        - Path=/service/**&#xD;
        filters:&#xD;
        - StripPrefix=1&#xD;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By using these &amp;lsquo;logical&amp;rsquo; server names, the Gateway can use the Registry to discover the true location of these services at runtime.&lt;/p&gt;&lt;h2&gt;&lt;a href="#wrapping-up" class="anchor" name="wrapping-up"&gt;&lt;/a&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;With the entire Spring toolkit at your disposal, it quickly becomes apparent how flexible and powerful Spring Cloud Gateway can be. If you dig into &lt;a href="https://github.com/benwilcock/spring-cloud-gateway-demo.git"&gt;the source code&lt;/a&gt;, you‚Äôll notice that with just a few lines of Java and a few dependencies, we can easily integrate Spring Boot microservices with Eureka, and control access to our service‚Äôs APIs. &lt;/p&gt;
&lt;p&gt;Before you finish, why not sign up for &lt;a href="https://springoneplatform.io/"&gt;SpringOne Platform 2019&lt;/a&gt; ‚Äì the premier conference for building scalable applications that delight users. Join thousands of like-minded Spring developers to learn, share, and have fun in Austin, TX from October 7th to 10th. Use the discount code &lt;strong&gt;S1P_Save200&lt;/strong&gt; when registering to save money on your ticket. If you need help convincing your manager use &lt;a href="https://springoneplatform.io/2019/convince-your-manager"&gt;this page&lt;/a&gt;. See you there.&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
</feed>
